#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const readline = __importStar(require("readline"));
const api_1 = require("./api");
function main() {
    let rl = readline.createInterface({
        input: process.stdout,
        output: process.stdout,
    });
    let last_text = '';
    function showProgress(task) {
        let text = task.text || 'no response yet...';
        if (text == last_text) {
            return;
        }
        console.clear();
        console.log(task.question);
        console.log('='.repeat(32));
        console.log(text);
        last_text = text;
    }
    function loop() {
        rl.question('Ask a question or type bye/exit/quit to exit: ', question => {
            switch (question) {
                case 'bye':
                case 'exit':
                case 'quit':
                    rl.close();
                    return;
            }
            (0, api_1.ask)(question, task => showProgress(task))
                .then(task => {
                console.log('='.repeat(32));
                console.log('text:', task.text.length, 'html:', task.html.length);
            })
                .catch(err => console.error(err))
                .finally(() => loop());
        });
    }
    loop();
}
exports.main = main;
if (process.argv[1] == __filename) {
    main();
}
